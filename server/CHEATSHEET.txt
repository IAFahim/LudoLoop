╔════════════════════════════════════════════════════════════════════════╗
║                    LUDO GAME - QUICK REFERENCE                          ║
║                     Automatic Matchmaking System                        ║
╚════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────┐
│ 🚀 START SERVER (30 seconds)                                            │
└─────────────────────────────────────────────────────────────────────────┘
  cd server
  npm install
  node server.js
  ✓ Server running on ws://localhost:8080

┌─────────────────────────────────────────────────────────────────────────┐
│ 🌐 WEB CLIENT (Instant)                                                 │
└─────────────────────────────────────────────────────────────────────────┘
  1. Open index.html in browser
  2. Click "Connect"
  3. Click "Find Match"
  4. Play!

┌─────────────────────────────────────────────────────────────────────────┐
│ 🎮 UNITY CLIENT (5 minutes)                                             │
└─────────────────────────────────────────────────────────────────────────┘
  1. Install: https://github.com/endel/NativeWebSocket.git#upm
  2. Copy LudoClient.cs to Assets/Scripts/
  3. Code:
     LudoClient client = FindObjectOfType<LudoClient>();
     client.Connect();
     client.FindMatch();
  4. Play!

┌─────────────────────────────────────────────────────────────────────────┐
│ 📋 KEY CONCEPTS                                                         │
└─────────────────────────────────────────────────────────────────────────┘
  ✓ No room codes needed
  ✓ No manual "create/join/start"
  ✓ Just "Find Match" → automatic matching
  ✓ 4+ players → Instant match
  ✓ 2-3 players → Match after 10 seconds
  ✓ Flexible team sizes (2v2, 3p, 4p)

┌─────────────────────────────────────────────────────────────────────────┐
│ 🔧 CONFIGURATION                                                        │
└─────────────────────────────────────────────────────────────────────────┘
  Edit server.js:
  this.QUEUE_TIMEOUT = 10000;  // 10 seconds default
  
  Options:
  5000   = 5 seconds  (faster, smaller teams)
  10000  = 10 seconds (balanced)
  15000  = 15 seconds (patient, larger teams)

┌─────────────────────────────────────────────────────────────────────────┐
│ 📡 MESSAGE TYPES                                                        │
└─────────────────────────────────────────────────────────────────────────┘
  CLIENT → SERVER:
  • find_match     Join matchmaking queue
  • leave_queue    Leave queue
  • roll_dice      Roll dice (your turn)
  • move_token     Move token
  • get_state      Get game state
  • leave_game     Leave game
  
  SERVER → CLIENT:
  • connected      Connection confirmed
  • queue_joined   In queue, waiting
  • match_found    Match ready! Game starting
  • dice_rolled    Someone rolled dice
  • token_moved    Someone moved token
  • game_over      Winner declared
  • error          Something went wrong

┌─────────────────────────────────────────────────────────────────────────┐
│ 🎲 GAME FLOW                                                            │
└─────────────────────────────────────────────────────────────────────────┘
  1. Connect to server
  2. FindMatch() 
  3. [Matchmaking... max 10s]
  4. match_found event
  5. Game auto-starts
  6. Players take turns
  7. Roll dice → Move token
  8. First to home wins!

┌─────────────────────────────────────────────────────────────────────────┐
│ 🧪 TEST IT                                                              │
└─────────────────────────────────────────────────────────────────────────┘
  # Automated tests
  node test-matchmaking.js 1     # 4 players instant
  node test-matchmaking.js 2     # 2 players flexible
  node test-matchmaking.js 3     # 3 players staggered
  
  # Manual test
  Open 4 browser tabs → All click "Find Match" → Instant match!

┌─────────────────────────────────────────────────────────────────────────┐
│ 📚 DOCUMENTATION                                                        │
└─────────────────────────────────────────────────────────────────────────┘
  NEW_QUICKSTART.md          ← Start here
  UNITY_INTEGRATION.md       ← Unity guide
  CHANGES_SUMMARY.md         ← What changed
  API.md                     ← Full API docs
  
  Unity Scripts:
  LudoClient.cs              ← Main client (590 lines)
  LudoGameUI.cs              ← Example UI (220 lines)

┌─────────────────────────────────────────────────────────────────────────┐
│ 🔍 TROUBLESHOOTING                                                      │
└─────────────────────────────────────────────────────────────────────────┘
  Problem: Can't connect
  ✓ Server running? (node server.js)
  ✓ URL correct? (ws://localhost:8080)
  
  Problem: Stuck in queue
  ✓ Need 2+ players total
  ✓ Wait 10 seconds
  ✓ Open another tab to test
  
  Problem: Unity errors
  ✓ NativeWebSocket installed?
  ✓ LudoClient.cs in project?
  ✓ Server URL set correctly?

┌─────────────────────────────────────────────────────────────────────────┐
│ ⚡ QUICK UNITY EXAMPLE                                                  │
└─────────────────────────────────────────────────────────────────────────┘
  using UnityEngine;
  
  public class QuickStart : MonoBehaviour
  {
      LudoClient client;
      
      void Start()
      {
          client = FindObjectOfType<LudoClient>();
          
          // Events
          client.OnMatchFound += (m) => 
              Debug.Log($"Match! {m.playerCount} players");
          
          client.OnDiceRolled += (d) => 
              Debug.Log($"Rolled {d.diceValue}");
          
          // Connect & play
          client.Connect();
          client.FindMatch();
      }
      
      void Update()
      {
          if (Input.GetKeyDown(KeyCode.Space) && client.IsMyTurn())
              client.RollDice();
      }
  }

┌─────────────────────────────────────────────────────────────────────────┐
│ 📊 TOKEN POSITIONS                                                      │
└─────────────────────────────────────────────────────────────────────────┘
  -1        = In base (not started)
  0-51      = Main path
  100-105   = Player 0 home stretch
  106-111   = Player 1 home stretch
  112-117   = Player 2 home stretch
  118-123   = Player 3 home stretch
  57        = Finished!

┌─────────────────────────────────────────────────────────────────────────┐
│ 🎯 TOKEN MAPPING                                                        │
└─────────────────────────────────────────────────────────────────────────┘
  Tokens 0-3    = Player 0 (Red)
  Tokens 4-7    = Player 1 (Blue)
  Tokens 8-11   = Player 2 (Green)
  Tokens 12-15  = Player 3 (Yellow)

┌─────────────────────────────────────────────────────────────────────────┐
│ ✅ READY TO GO!                                                         │
└─────────────────────────────────────────────────────────────────────────┘
  1. Start server:  node server.js
  2. Test web:      Open index.html
  3. Build Unity:   Copy LudoClient.cs
  4. Play!          Click "Find Match"
  
  The website doesn't suck anymore! 🎉

╔════════════════════════════════════════════════════════════════════════╗
║  Questions? Check NEW_QUICKSTART.md and UNITY_INTEGRATION.md           ║
╚════════════════════════════════════════════════════════════════════════╝
